#!/usr/bin/env ruby

begin
  require 'chef'
  require 'json'
rescue LoadError => e
  warn "Gem dependency error: #{e.message}"
  exit 1
end

def edit_json(editor, hash) # rubocop:disable Metrics/MethodLength , Metrics/AbcSize
  file = Tempfile.new(['', '.json'])
  file.write(JSON.pretty_generate(hash))
  file.rewind # ensure file is written

  begin
    system(editor, file.path)
    file.open # Reopen file after edit
    JSON.parse(file.read)
  rescue JSON::ParserError
    while true # rubocop:disable Style/InfiniteLoop, Lint/LiteralAsCondition
      $stderr.print 'Unable to parse JSON. Edit again [Y/N]? '
      case gets.strip.downcase
      when 'y', 'yes'
        retry
      when 'n', 'no'
        break
      end
    end
  ensure
    file.close
    file.unlink
  end
end

############################
### command line options ###
############################

options = {}
# https://docs.chef.io/data_bags.html#encryption-versions
options[:format] = if Chef::VERSION.to_f < 11.0
                     0
                   elsif Chef::VERSION.to_f < 11.6
                     1
                   elsif Chef::VERSION.to_f < 12.0
                     2
                   else
                     3
                   end

# Possible default locations to look for encrypted data bag secret
# Order matters: first one to exist is chosen.
secret_file_candidates = [
  ENV['ENCRYPTED_DATA_BAG_SECRET'].to_s,
  './encrypted_data_bag_secret',
  ::File.join(ENV['HOME'].to_s, '.chef', 'encrypted_data_bag_secret'),
  '/etc/chef/encrypted_data_bag_secret'
]

# Check for a valid default for secret_file
secret_file_candidates.each do |candidate|
  if ::File.exist?(candidate)
    options[:default_secret_file] = candidate
    break
  end
end

options[:editor] = ENV['EDITOR'] || 'vi'

option_parser = OptionParser.new do |opts| # rubocop:disable Metrics/BlockLength
  opts.banner = "Usage: #{File.basename($PROGRAM_NAME)} <data bag item> [options]"
  opts.on('-s', '--secret-file PATH',
          'Location of the encrypted data bag secret file',
          'Default locations (in order of precedence):',
          '  $ENCRYPTED_DATA_BAG_SECRET',
          '  ./encrypted_data_bag_secret',
          '  ~/.chef/encrypted_data_bag_secret',
          '  /etc/chef/encrypted_data_bag_secret') do |secret|
    options[:secret_file] = secret
  end
  opts.on('-S', '--secret SECRET',
          'Secret to use for encryption',
          'It is preferred to use --secret-file to avoid',
          'leaking the secret or viewing it in plain text.') do |secret|
    options[:secret] = secret.strip
  end
  opts.on('-e', '--editor EDITOR',
          "Editor to use (default: #{options[:editor]})") do |editor|
    options[:editor] = editor
  end
  opts.on('-f', '--force',
          'Re-encrypt all keys even if there are no changes',
          '(default: only re-encrypt changed keys)') do
    options[:force] = true
  end
  opts.on('-b', '--batch', 'Do not prompt for file editing') do
    options[:batch] = true
  end
  opts.on('--show', 'Print decrypted data bag item and exit') do
    options[:show] = true
  end
  opts.on('--format VERSION',
          "Encryption version (default: #{options[:format]})") do |format|
    options[:format] = format.to_i
  end
  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit
  end
end

begin
  option_parser.parse!
rescue OptionParser::ParseError => e
  warn e.message
  warn "\n#{option_parser}"
  exit 1
end

###############################
### Verify required options ###
###############################

# Set default secret_file if we don't have a secret_file or secret provided
options[:secret_file] = options[:default_secret_file] unless options[:secret_file] || options[:secret]

if options[:secret_file] && options[:secret]
  warn 'Only choose one options: --secret-file, --secret'
  exit 1
elsif !(options[:secret_file] || options[:secret])
  warn 'One of the following options is required: --secret-file, --secret'
  warn "\n#{option_parser}"
  exit 1
elsif options[:secret_file] && !::File.exist?(options[:secret_file])
  warn "File missing: #{options[:secret_file]}"
  exit 1
elsif options[:secret] && options[:secret].empty?
  warn 'Invalid zero length secret'
  exit 1
end

##########################
### Initial data setup ###
##########################

if ARGV.empty?
  warn 'Required parameter missing: <data bag item>'
  warn "\n#{option_parser}"
  exit 1
elsif ARGV.size > 1
  warn "Only one data bag item is supported (received #{ARGV.size})"
  exit 1
end

file_path = ARGV.pop
file_base = ::File.basename(file_path, '.json')

Chef::Config[:data_bag_encrypt_version] = options[:format]
secret = if options[:secret_file]
           begin
             Chef::EncryptedDataBagItem.load_secret(options[:secret_file])
           rescue ArgumentError => e
             warn e.message
             exit 1
           end
         else
           options[:secret]
         end

before_encrypted_hash = if ::File.exist?(file_path)
                          begin
                            JSON.parse(IO.read(file_path))
                          rescue JSON::ParserError
                            warn "Unable to parse JSON: #{file_path}"
                            exit 1
                          end
                        else
                          {}
                        end

#########################
### Begin actual work ###
#########################

begin
  before_plain_hash = Chef::EncryptedDataBagItem.new(before_encrypted_hash, secret).to_hash
rescue Chef::EncryptedDataBagItem::DecryptionFailure => e
  warn 'Unable to decrypt the data bag item.'
  if e.message.include?('wrong final block length')
    warn 'Is the data bag item encrypted?'
  else
    warn 'Are you using the correct key?'
  end
  exit 1
end

if options[:show]
  if ::File.exist?(file_path)
    puts JSON.pretty_generate(before_plain_hash)
    exit 0
  else
    exit 1
  end
end

hash_to_edit = before_plain_hash.empty? ? { 'id' => file_base } : before_plain_hash

begin
  if !$stdin.tty?
    after_plain_hash = JSON.parse(ARGF.read)
    raise ArgumentError, 'JSON from STDIN must be a Hash' unless after_plain_hash.is_a?(Hash)
  elsif !$stdout.tty? || options[:batch]
    after_plain_hash = hash_to_edit
  else
    after_plain_hash = edit_json(options[:editor], hash_to_edit)
  end
rescue ArgumentError => e
  warn e.message
  exit 1
rescue JSON::ParserError
  warn 'Unable to parse JSON from STDIN'
  exit 1
end

# Exit if editing temporary file failed
unless after_plain_hash
  warn 'Changes discarded'
  exit 1
end

# Exit now if no changes detected and option force is not set.
# We need to check both on hash equality and hash key order.
if before_plain_hash.eql?(after_plain_hash) &&
   before_plain_hash.keys.eql?(after_plain_hash.keys) &&
   !options[:force]
  puts 'No changes found'
  exit 0
end

begin
  after_encrypted_hash = Chef::EncryptedDataBagItem.encrypt_data_bag_item(after_plain_hash, secret).to_hash
rescue Chef::EncryptedDataBagItem::UnsupportedEncryptedDataBagItemFormat => e
  warn e.message
  exit 1
end

unless options[:force]
  # Restore encrypted hash key to the old value if it
  # didn't change. This will minimize diff when only
  # updating a subset of keys in a data bag item.
  after_plain_hash.each do |k, v|
    after_encrypted_hash[k] = before_encrypted_hash[k] if v.eql?(before_plain_hash[k])
  end
end

IO.write(file_path, "#{JSON.pretty_generate(after_encrypted_hash)}\n")
puts 'Changes saved'
